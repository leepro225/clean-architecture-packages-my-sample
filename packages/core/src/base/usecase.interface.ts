export abstract class Usecase<T> {
    abstract execute(...args: any[]): T;
}

/**
 * 2. 유스케이스 인터페이스를 만든다.
 * 
 * 유스케이스와 유스케이스의 디펜던시와 상호작용하는 표준적인 방법을 정의내림.
 * 
 * abstract method?
 * 자식 클래스에서 반드시 오버라이딩해야만 사용할 수 있는 메소드를 의미,
 * 추상 메소드가 포함된 클래스를 상속받는 자식 클래스가 반드시 추상 메소드를 구현하도록 하기 위함.
 * 
 * abstract class? 
 * 하나 이상의 추상 메소드를 포함하는 클래스,
 * 이 클래스를 상속받는 모든 클래스에서는 이 추상 메소드를 반드시 재정의해야함.
 * 추상 클래스는 다형성을 가지는 메소드의 집합을 정의할 수 있도록 해줌.
 * 
 * extends
 * 부모에서 선언 / 정의를 모두하며 자식은 메소드 / 변수를 그대로 사용할 수 있음
 * implements (interface 구현)
 * 부모 객체는 선언만 하며 정의(내용)은 자식에서 오버라이딩 (재정의) 해서 사용해야함
 * abstract
 * extends와 interface 혼합. extends하되 몇 개는 추상 메소드로 구현되어 있음
 */